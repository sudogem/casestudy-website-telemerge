


--  @intHeight  
--  @intLength  
--  @intWidth  
-- 2007/01/14 
-- created by: rcorbo 


CREATE   PROCEDURE [dbo].[spInsertVehicle]    
	@SalesFloor MONEY = 0,   
	@PriceBaseSales MONEY,   
	@DateConfirm DATETIME,   
	@ChassisNo VARCHAR(20) ,   
	@IDDealer INT,   
	@dblM3 REAL = 0,  
	@intHighLow INT,   
	@IDCustomer INT,   
	@IDShip INT,   
	@IDShipTo INT,   
	@Cleaning BIT,    
	@Grade VARCHAR(30),   
	@PricePurchase MONEY,   
	@VehicleModel VARCHAR(20),   
	@VehicleYear SMALLINT,   
	@VehicleMake VARCHAR(16),   
	@VehicleTransmission VARCHAR(10),   
	@VehicleKMS FLOAT,   
	@VehicleEngineDisplACement VARCHAR(6),   
	@VehicleDoors VARCHAR(20),   
	@VehicleColorExterior VARCHAR(20),   
	@VehicleColorInterior VARCHAR(20),   
	@VehicleInteriorType  VARCHAR(15),   
	@VehicleSpareTire BIT,   
	@VehiclePowerSteering BIT,   
	@VehiclePowerWindow BIT,   
	@VehicleAC BIT,   
	@VehicleSunRoof BIT,   
	@VehicleFuel VARCHAR(15),   
	@VehicleWheel TINYINT,   
	@Transport VARCHAR(15),   
	@ConditionGrade REAL,   
	@IDBuyer INT,  
	@blnISLeftHandDrive BIT,  
	@strSalesNote VARCHAR(255),  
	@strInteriorNote VARCHAR(255),  
	@strRearNote VARCHAR(255),  
	@strFrontNote VARCHAR(255),  
	@IDAssistor INT = 0,   -- IDAccountManager  
	@strAssistNote VARCHAR(255) = '',  
	@IDSalesAssistor INT = 0,  
	@strShupin VARCHAR(50) = 'N/A',  
	@intWeight INT = 0,  
	@IDVehicleCategory INT,  
	@UserName VARCHAR(15) = NULL,  
	@PriceActual MONEY = NULL,  
	@intIDirectStatus int = 0,  
	@IDVehicle_iDirect int = 0,  
	@intHeight INT=0,  
	@intLength INT=0,  
	@intWidth INT=0,  
	@curAuctionFee INT =0, --EYU Added  
	@curExportPrice Money = 0, -- 2005/01/14 KGB Added  
	@curTransportCost Money = 0, -- 2005/01/18 KGB added  
	@AuctionType VARCHAR(10)='', -- RALTAMERA ADDED  
--	@FCPriceSales      Money = Null,  
	@FCPriceExport    Money= 0,  
--	@FCExchange       Money= 1  
	@FCExchange       REAL= 1,
	@blnNoNZ BIT = 0 --FVG 11/08/2006
AS  
	BEGIN  
  
	DECLARE @IDVehicle INT,   
   		@RC INT,  
   		@countVehicle INT,  
   		@intStockCustomer INT  
  
	BEGIN TRANSACTION  
	-- Jaquino [05/16/2004]  
	IF @IDVehicle_iDirect = 0 and @IDBuyer = 174-- purchaser is iDirect  
	BEGIN  
		SELECT  top 1 @IDVehicle_iDirect = Idvehicle  
  		FROM tblAAresultsBKup   
  		WHERE strchassisprefix = @ChassisNo  
	END  
  
 -- dbalsicas [04/01/2004]  
 -- If entry is made in AutoAuction use the default transport name assigned  
 -- to the dealer.  
 -- @UserName with a postfix '-AA' is from AutoAuction  
	IF RIGHT(@UserName,3) = '-AA'  
	BEGIN  
		SELECT @Transport= s.strLocationName  
		FROM Dealer d  
		INNER JOIN tblStockLocation s ON s.IDStockLocation = d.IDStockLocation  
		WHERE d.IDDealer = @IDDealer   
	END  
  
 --New rules  
 --02/05/2004  
 --by dbalsicas  
 --1>Units assigned to Yokohama port should be rerouted to Nagoya for the time being - OK  
 --2>Units purchased by ATNZ (ID 23300) and ATOZ (ID 8918) through Isuzu Umax Makuhari (295)  
 --  and Moss Global (367) should be sent to Kawasaki (3).  
 --  The rest should be sent to ATJ (1).  
	IF (@IDCustomer = 23300) OR (@IDCustomer = 8918)  
	BEGIN
  /** -- disabled temporarily until Kawasaki Yard is ready  
  IF (@IDDealer = 295) OR (@IDDealer = 367)  
  begin  
   SET @Transport = 'KAWASAKI'  
  end  
  ELSE  
  begin  
  */  
   --SET @Transport = 'ATJ'  			commented by rvillarosa 07.19.06
		SET @Transport = 'Nagoya'		-- 	added rvillarosa 07.19.06
  --end  
	END 
  
 SELECT   
  @countVehicle = COUNT(*)   
 FROM   
  Vehicle   
 WHERE   
  ChassisNo = @ChassisNo  
  
 -- Temporary fix (DH 10/2/03)  
 -- New vehicle form is still feeding 'Port' (port has been renamed to kamigumi)  
 IF @Transport = 'Port'  
  SET @Transport = 'Kamigumi'  
  
 IF @countVehicle > 0   
  BEGIN  
  RAISERROR('A car with this chassis exists already.',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50001  
  END  
  
INSERT Vehicle(  
	PriceBaseSales,   
	ChassisNo ,   
	IDDealer,   
	intHeight,  
	intLength,  
	intWidth,  
	dblM3,   
	intHighLow,   
	IDCustomer,   
	IDShip,   
	IDShipTo,   
	Cleaning,    
	Grade,   
	DateStock,   
	PricePurchase,   
	VehicleModel,   
	VehicleYear,   
	
	VehicleMake,   
	VehicleTransmission,   
	VehicleKMS,   
	VehicleEngineDisplACement,   
	VehicleDoors,   
	VehicleColorExterior,   
	VehicleColorInterior,   
	
	VehicleInteriorType,   
	VehicleSpareTire,   
	VehiclePowerSteering,   
	VehiclePowerWindow,   
	VehicleAC,   
	VehicleSunRoof,   
	VehicleFuel,   
	VehicleWheel,   
	Transport,   
	ConditionGrade,   
	IDBuyer,    
	blnISLeftHandDrive,  
	StatusShip,  
	strShupin,  
	intWeight,  
	strLastModifiedBy,  
	datLastModified,  
	IDVehicleCategory,  
	PriceActual,  
	PriceInvoice,  
	PriceSales,-- 2004/07/16 jba added  
	intIDirectStatus,  
	IDVehicle_iDirect,  
	priceSalesFloor,  
	curAuctionFee,  
	curExportPrice,  
	curTransportCost,  
	AuctionType,  
--  FCPriceSales,  
	FCPriceExport,  
	FCExchange,    
	FCPriceInvoice, --FVG 05/09/2006  
	blnNoNZ --FVG 11/08/2006
	)   
VALUES(  
	@PriceBaseSales ,   
	@ChassisNo ,   
	@IDDealer ,   
	@intHeight,  
	@intLength,  
	@intWidth,  
	@dblM3 ,   
	@intHighLow ,   
	@IDCustomer ,   
	@IDShip ,   
	@IDShipTo ,   
	@Cleaning ,    
	@Grade ,   
	GETDATE() ,   
	@PricePurchase ,   
	@VehicleModel ,   
	@VehicleYear ,   
	@VehicleMake ,   
	@VehicleTransmission ,   
	@VehicleKMS ,   
	@VehicleEngineDisplACement ,   
	@VehicleDoors ,   
	@VehicleColorExterior ,   
	@VehicleColorInterior ,   
	@VehicleInteriorType ,   
	@VehicleSpareTire ,   
	@VehiclePowerSteering ,   
	@VehiclePowerWindow ,   
	@VehicleAC ,   
	@VehicleSunRoof ,   
	@VehicleFuel ,   
	@VehicleWheel ,   
	@Transport ,   
	@ConditionGrade ,   
	@IDBuyer ,    
	@blnISLeftHandDrive ,  
	0,  
	@strShupin,  
	@intWeight,  
	@UserName,  
	GETDATE(),  
	@IDVehicleCategory,  
	@PriceActual,  
	@PriceActual,  
	@PriceActual,  
	@intIDirectStatus,  
	@IDVehicle_iDirect,  
	@SalesFloor,  
	@curAuctionFee,  
	@curExportPrice,  
	@curTransportCost,  
	@AuctionType,  
--  @FCPriceSales,  
	@FCPriceExport,  
	@FCExchange,  
	@FCPriceExport, --FVG 05/09/2006  
	@blnNoNZ  --FVG 11/08/2006
	)  
 IF @@ERROR <> 0 or @@ROWCOUNT <> 1  
  BEGIN  
  RAISERROR ('Vehicle table insert failed. ',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50001   
  END  
  
 SELECT @IDVehicle = IDVehicle FROM Vehicle WHERE ChassisNo = @ChassisNo  
  
 INSERT tblNotes (IDNoteCategory, IDVehicle, strNote, dateNote, Visibility)    
  SELECT   
   IDNoteCategory,   
   @IDVehicle,   
   @strSalesNote,   
   GETDATE(),   
   strVisiblity  
  FROM tblVehicleNoteCategory  WHERE strCategory = 'Sales'   
  
 IF @@ERROR <> 0 or @@ROWCOUNT <> 1  
  BEGIN  
  RAISERROR ('Could not insert sales note. ',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50002   
  END  
  INSERT tblNotes (IDNoteCategory, IDVehicle, strNote, dateNote, Visibility)    
  SELECT   
   IDNoteCategory,   
   @IDVehicle,   
   @strInteriorNote,   
   GETDATE(),   
   strVisiblity  
  FROM tblVehicleNoteCategory  WHERE strCategory = 'Interior'   
  
  
 IF @@ERROR <> 0 or @@ROWCOUNT <> 1  
  BEGIN  
  RAISERROR ('Could not insert ineterior note. ',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50003  
  
  END  
  
 Insert tblNotes (IDNoteCategory, IDVehicle, strNote, dateNote, Visibility)    
  SELECT   
   IDNoteCategory,   
   @IDVehicle,   
   @strFrontNote,   
   GETDATE(),   
   strVisiblity  
  FROM tblVehicleNoteCategory  WHERE strCategory = 'Front'   
  
  
 IF @@ERROR <> 0 or @@ROWCOUNT <> 1  
  BEGIN  
  RAISERROR ('Could not insert front note. ',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50004  
  END  
  
 Insert tblNotes (IDNoteCategory, IDVehicle, strNote, dateNote, Visibility)    
  SELECT   
   IDNoteCategory,   
   @IDVehicle,   
   @strRearNote,   
   getdate(),   
   strVisiblity  
  FROM tblVehicleNoteCategory  WHERE strCategory = 'Rear'   
  
 IF @@ERROR <> 0 or @@ROWCOUNT <> 1  
  BEGIN  
  RAISERROR ('Could not insert rear note. ',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50006   
  END  
  
  Insert tblNotes (IDNoteCategory, IDVehicle, strNote, dateNote, Visibility)    
  SELECT   
   IDNoteCategory,   
   @IDVehicle,   
   @strRearNote,   
   getdate(),   
   strVisiblity  
  FROM tblVehicleNoteCategory  WHERE strCategory = 'Export'   
  
 IF @@ERROR <> 0 or @@ROWCOUNT <> 1  
  BEGIN  
  RAISERROR ('Could not insert export note. ',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50006   
  END  
 -- insert default note categories (rear interior, engine, front seat, back seat)  
 Insert tblNotes (IDNoteCategory, IDVehicle, strNote, dateNote, Visibility)    
  SELECT   
   IDNoteCategory,   
   @IDVehicle,   
   @strRearNote,   
   getdate(),   
   strVisiblity  
  FROM tblVehicleNoteCategory  WHERE IDNoteCategory IN(18, 65, 66, 67)  
  
 EXEC @RC = _spLogPurchase @IDVehicle , @IDBuyer , @IDAssistor, @strAssistNote  
  
 IF @@ERROR <> 0 OR @RC <> 0  
  BEGIN  
  RAISERROR ('_spLogPurchase failed. ',16,-1) WITH SETERROR   
  ROLLBACK TRANSACTION  
  RETURN 50007  
  END  
  
 SELECT   
  @intStockCustomer = ISStockCustomer   
 FROM   
  Customer   
 WHERE   
  IDCustomer = @IDShipTo  
  
 -- Mark sold flag  
 IF @intStockCustomer = 0  
  BEGIN  
   UPDATE   
    Vehicle  
   SET   
    blnIsSold = 1  
   WHERE   
    IDVehicle = @IDVehicle  
  END   
 ELSE  
  BEGIN  
   UPDATE   
    Vehicle  
   SET   
    blnIsSold = 0  
   WHERE   
    IDVehicle = @IDVehicle    
  END   
  
 /*  
The following code is used whenever the newly inserted vehicle has a new make or new model.  
*/   
IF @VehicleMake IS NOT NULL AND @VehicleModel IS NOT NULL  
BEGIN  
 Execute spAddMakeANDModel @strMake = @VehicleMake,@strModel=@VehicleModel  
END  
/*END*/  
  
  
 /* The following code is used to add purchase assist/sales assist point into   
           tblPoint, purchase/sales point are added through the vehicle insert trigger  
    Author: David H. (04/09/2001)  
 */  
   
 DECLARE @IDNote AS INT  
  
 -- If this is a purchase assist  
 IF @IDAssistor > 0  
 BEGIN  
  -- Update purchase assist point  
  EXECUTE @RC = spUpdatePurchaseAssistPoint   
   @IDVehicle = @IDVehicle,  
   @IDPurchaseAssistAM = @IDAssistor,  
   @strNote = @strAssistNote  
  
  IF @RC <> 0  
  BEGIN  
   ROLLBACK TRANSACTION  
   RETURN @RC  
  END  
    
  -- Get the note ID  
  SELECT @IDNote = IDPurchaseAssistNote FROM tblPoint WHERE IDVehicle = @IDVehicle  
  
  -- Update customer journal  
  EXECUTE @RC = spUpdateCustJournal   
   @IDVehicle = @IDVehicle,  
   @IDNote = @IDNote,  
   @IDAssistAM = @IDAssistor  
  
  IF @RC <> 0  
  BEGIN  
   ROLLBACK TRANSACTION  
   RETURN @RC  
  END    
 END  
  
 -- If this is a sales assist  
 IF @intStockCustomer = 0 AND @IDSalesAssistor > 0  
 BEGIN  
  EXECUTE @RC = spUpdateSalesAssistPoint   
   @IDVehicle = @IDVehicle,  
   @IDSalesAssistAM = @IDSalesAssistor  
  
  IF @RC <> 0  
  BEGIN  
   ROLLBACK TRANSACTION  
   RETURN @RC  
  END  
  
  -- Get the note ID  
  SELECT @IDNote = IDSalesNote FROM tblPoint WHERE IDVehicle = @IDVehicle  
  
  -- Update customer journal (only for regular sales, not on-sale)  
  EXECUTE @RC = spUpdateCustJournal   
   @IDVehicle = @IDVehicle,  
   @IDNote = @IDNote,  
   @IDAssistAM = @IDSalesAssistor  
  
  IF @RC <> 0  
  BEGIN  
   ROLLBACK TRANSACTION  
   RETURN @RC  
  END  
 END  
  
 COMMIT TRANSACTION  
 SELECT @IDVehicle  
 RETURN 0  
 END  
  
  
  
  




GO
